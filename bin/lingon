#!/usr/bin/env node

'use strict';

var fs      = require('fs');
var spawn   = require('child_process').spawn;
var chalk   = require('chalk');
var Liftoff = require('liftoff');
var argv    = require('minimist')(process.argv.slice(2));

function log() {
  console.log.apply(null, ["[ " + chalk.red('Lingon CLI') + " ]"].concat(
    Array.prototype.slice.call(arguments, 0)
  ));
}

if(!!argv.v || argv._[0] == 'version') {
  var pkg = require('../package.json');
  log('Lingon CLI version:', pkg.version);
}

var cli = new Liftoff({
  processTitle: 'lingon',
  moduleName: 'lingon',
  configName: 'lingon'
});

cli.launch(function handleArguments(env) {
  var argv = env.argv;

  if (!env.configPath) {
    log(chalk.red('No lingon.js file found'));
    process.exit(1);
  }

  if (!env.modulePath) {
    log(chalk.red('No local lingon install found in'), chalk.magenta(env.cwd));
    log(chalk.yellow('Try running: npm install lingon'));
    process.exit(1);
  }

  global.lingonCliVersion = env.modulePackage.version;

  // Change working directory to the one containing lingon.js
  process.chdir(env.configBase);

  // Start new lingon sub process
  var lingonProcess;
  var spawnLingonProcess = function spawnLingonProcess() {
    if(lingonProcess) {
      log('Configuration changed. Restarting Lingon process!');
      lingonProcess.kill();
      lingonProcess = null;
    }

    lingonProcess = spawn(env.configPath, process.argv.slice(2), { stdio: 'inherit' });
  };

  // setting up a file watcher to reload the lingon process when the
  // lingon.js file has been modified
  var lingonFileWatch;
  var setupWatcher = function setupWatcher() {
    lingonFileWatch = fs.watch(env.configPath, function() {
      lingonFileWatch.close();
      spawnLingonProcess();

      // wait a moment until continuing to watch for changes, that way
      // any swap files will be resolved and multiple events per change
      // can _hopefully_ be prevented
      setTimeout(function() {
        setupWatcher();
      }, 3000);
    });
  };

  spawnLingonProcess();
  setupWatcher();
});
